---
- name: Debug - Display detected Operating System family and package manager
  debug:
    msg: "Detected OS Family: {{ ansible_facts['os_family'] }}, Package Manager: {{ ansible_facts['pkg_mgr'] }}"

# --- Python 3 and pip installation ---
- name: Ensure Python 3 and pip are installed on RedHat-based systems (dnf/yum)
  ansible.builtin.package:
    name:
      - python3
      - python3-pip
    state: present
  when: ansible_facts['os_family'] == "RedHat"
  become: yes # Required for package installation

# - name: Ensure Python 3 and pip are installed on Debian-based systems (apt)
#   ansible.builtin.apt:
#     name:
#       - python3
#       - python3-pip
#     state: present
#     update_cache: yes # Ensure package cache is updated
#   when: ansible_facts['os_family'] == "Debian"
#   become: yes # Required for package installation

- name: Ensure Python 3 and pip are installed on Debian-based systems (apt)
  block:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      register: apt_update_result
      ignore_errors: true

    - name: Fail if apt update failed
      fail:
        msg: "Failed to update apt cache. Please check network connectivity and repository configuration. Error: {{ apt_update_result.msg }}"
      when: apt_update_result.failed

    - name: Install python3 and python3-pip
      ansible.builtin.apt:
        name:
          - python3
          - python3-pip
        state: present
  when: ansible_facts['os_family'] == "Debian"
  become: yes



- name: Ensure /usr/bin/python exists (symlink to python3) and report status
  ansible.builtin.raw: |
    if [ ! -f /usr/bin/python ] && [ -f /usr/bin/python3 ]; then
      ln -s /usr/bin/python3 /usr/bin/python
      PYTHON_LOC=$(which python3)
      PYTHON_VER=$(python3 --version 2>&1)
      echo "Python symlink created. Python location: ${PYTHON_LOC}, Version: ${PYTHON_VER}"
    elif [ -f /usr/bin/python ]; then
      echo "Python symlink already exists"
    else
      echo "Python3 not found"
    fi

  changed_when: false # <--- Changed this to always be false to prevent the 'stdout' undefined error
  become: yes
  # check_mode: no # raw module usually bypasses check_mode, but can be added for explicit clarity



- name: Ensure python3-venv is installed on Debian-based systems
  ansible.builtin.apt:
    name: "python3-venv"
    state: present
    update_cache: yes
  when: ansible_facts['os_family'] == "Debian"
  become: yes

- name: Create Python virtual environment for Ansible dependencies
  ansible.builtin.command: python3 -m venv /opt/ansible_venv
  args:
    creates: /opt/ansible_venv/bin/activate
  become: true

- name: Install Kubernetes Python libraries in venv
  ansible.builtin.pip:
    name:
      - kubernetes
      - openshift
    executable: /opt/ansible_venv/bin/pip
  become: true

- name: Set environment to use virtualenv for future tasks
  set_fact:
    ansible_python_interpreter: /opt/ansible_venv/bin/python


#----------------------------------------------------------------

    # elif [ -f /usr/bin/python ]; then
    #   PYTHON_LOC=$(readlink -f /usr/bin/python)
    #   PYTHON_VER=$(${PYTHON_LOC} --version 2>&1)
    #   echo "Python symlink already exists. Python location: ${PYTHON_LOC}, Version: ${PYTHON_VER}"
    # else
    #   echo "Warning: /usr/bin/python3 not found. Could not create /usr/bin/python symlink."
    # fi