---
#####################################################################

- name: Get Kubernetes node name
  command: kubectl get nodes -o jsonpath='{.items[0].metadata.name}'
  register: k8s_node_name
  changed_when: false
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
 
- name: Debug - Kubernetes node name
  debug:
    var: k8s_node_name.stdout
 
- name: Debug - Full kubectl get nodes output
  command: kubectl get nodes
  register: kubectl_get_nodes_full_output
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
 
- name: Debug - Print full kubectl get nodes output
  debug:
    var: kubectl_get_nodes_full_output.stdout_lines
 
- name: Debug - Kubernetes node name used for PV
  debug:
    var: k8s_node_name.stdout

#####################################################################

- name: Create hostpath directory for Prometheus
  ansible.builtin.file:
    path: "/mnt/data/prometheus"
    state: directory
    owner: 65534
    group: 65534
    mode: '0775'
  become: true
  become_user: root

- name: Create hostpath directory for Alertmanager
  ansible.builtin.file:
    path: "/mnt/data/alertmanager"
    owner: 65534
    group: 65534
    state: directory
    mode: '0775'
  become: true
  become_user: root

- name: Create hostpath directory for Grafana
  ansible.builtin.file:
    path: "/mnt/data/grafana"
    state: directory
    owner: 65534
    group: 65534
    mode: '0775'
  become: true
  become_user: root

#####################################################################

- name: Add NGINX Ingress Controller Helm repository
  kubernetes.core.helm_repository:
    name: ingress-nginx
    repo_url: "https://kubernetes.github.io/ingress-nginx"
  become: true
  become_user: root

- name: Install NGINX Ingress Controller
  kubernetes.core.helm:
    name: ingress-nginx
    chart_ref: ingress-nginx/ingress-nginx
    release_namespace: ingress-nginx
    create_namespace: yes
  become: true
  become_user: root



#####################################################################



- name: Add Prometheus Helm repository
  kubernetes.core.helm_repository:
    name: "{{ pro_graf_prometheus_repo_name }}"
    repo_url: "{{ pro_graf_prometheus_repo_url }}"
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  become_user: root

- name: Add Grafana Helm repository
  kubernetes.core.helm_repository:
    name: "{{ pro_graf_grafana_repo_name }}"
    repo_url: "{{ pro_graf_grafana_repo_url }}"
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  become_user: root

#####################################################################

- name: Deploy  pv & pvc for Prometheus
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('template', 'prometheus-pv-pvc.yml.j2') }}"
    state: present
    namespace: monitoring
    kubeconfig: /etc/kubernetes/admin.conf
    validate_certs: no
  become: true
  become_user: root

- name: Deploy  pv & pvc for Alertmanager
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('template', 'alertmanager-pv-pvc.yml.j2') }}"
    state: present
    namespace: monitoring
    kubeconfig: /etc/kubernetes/admin.conf
    validate_certs: no
  become: true
  become_user: root

- name: Install Prometheus
  kubernetes.core.helm:
    name: "{{ pro_graf_prometheus_chart_name }}"
    chart_ref: "{{ pro_graf_prometheus_chart_ref }}"
    release_namespace: "{{ pro_graf_release_namespace }}"
    create_namespace: yes
    values:
      kube-state-metrics:
        enabled: true
      server:
        service:
          type: "{{ pro_graf_prometheus_server_service_type }}"
        tolerations:
          - key: "node-role.kubernetes.io/control-plane"
            operator: "Exists"
            effect: "NoSchedule"
        persistence:
          enabled: true
          storageClassName: sdv-local-storage
          accessModes:
            - ReadWriteOnce
          size: "8Gi"
      alertmanager:
        persistence:
          enabled: true
          storageClassName: sdv-local-storage
          accessModes:
            - ReadWriteOnce
          size: "8Gi"
    kubeconfig: /etc/kubernetes/admin.conf
  become: true
  become_user: root

- name: Wait for Prometheus PVC to be bound
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
    name: prometheus-server
    namespace: "{{ pro_graf_release_namespace }}"
    kubeconfig: /etc/kubernetes/admin.conf
  register: prometheus_pvc_status
  until: prometheus_pvc_status.resources | length > 0 and prometheus_pvc_status.resources[0].status.phase == 'Bound'
  retries: 30
  delay: 10
  become: true
  become_user: root

- name: Wait for Alertmanager PVC to be bound
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
    name: storage-prometheus-alertmanager-0
    namespace: "{{ pro_graf_release_namespace }}"
    kubeconfig: /etc/kubernetes/admin.conf
  register: alertmanager_pvc_status
  until: alertmanager_pvc_status.resources | length > 0 and alertmanager_pvc_status.resources[0].status.phase == 'Bound'
  retries: 30
  delay: 10
  become: true
  become_user: root


#####################################################################


- name: Deploy  pv & pvc for Grafana
  kubernetes.core.k8s:
    resource_definition: "{{ lookup('template', 'grafana-pv-pvc.yml.j2') }}"
    state: present
    namespace: monitoring
    kubeconfig: /etc/kubernetes/admin.conf
    validate_certs: no
  become: true
  become_user: root

- name: Install Grafana
  kubernetes.core.helm:
    name: "{{ pro_graf_grafana_chart_name }}"
    chart_ref: "{{ pro_graf_grafana_chart_ref }}"
    release_namespace: "{{ pro_graf_release_namespace }}"
    kubeconfig: /etc/kubernetes/admin.conf
    values:
      service:
        type: "{{ pro_graf_grafana_server_service_type }}"
        # port: "{{ grafana_port }}"
        # nodePort: "{{ grafana_nodeport }}"
      persistence:
        enabled: true
        storageClassName: sdv-local-storage
        accessModes:
          - ReadWriteOnce
        size: "8Gi"
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
  become: true
  become_user: root

- name: Wait for Grafana PVC to be bound
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
    name: grafana
    namespace: "{{ pro_graf_release_namespace }}"
    kubeconfig: /etc/kubernetes/admin.conf
  register: grafana_pvc_status
  until: grafana_pvc_status.resources | length > 0 and grafana_pvc_status.resources[0].status.phase == 'Bound'
  retries: 30
  delay: 10
  become: true
  become_user: root


#####################################################################



- name: Deploy Monitoring Ingress
  kubernetes.core.k8s:
    src: "{{ playbook_dir }}/../roles/pro-graf/templates/monitoring-ingress.yml"
    state: present
    namespace: monitoring
    kubeconfig: /etc/kubernetes/admin.conf
    validate_certs: no
  become: true
  become_user: root


- name: Wait for Ingress Controller to get an external IP
  shell: "kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
  register: ingress_ip_result
  until: ingress_ip_result.stdout != ""
  retries: 30
  delay: 10
  become: true
  become_user: root
  changed_when: false

- name: Set ingress_ip fact
  set_fact:
    ingress_ip: "{{ ingress_ip_result.stdout }}"

- name: Update /etc/hosts for sdv-grafana
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '.*\s+sdv-grafana'
    line: "{{ ingress_ip }} sdv-grafana"
    owner: root
    group: root
    mode: '0644'
  delegate_to: localhost
  become: true

- name: Update /etc/hosts for sdv-prometheus
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '.*\s+sdv-prometheus'
    line: "{{ ingress_ip }} sdv-prometheus"
    owner: root
    group: root
    mode: '0644'
  delegate_to: localhost
  become: true


#####################################################################

- name: Get Grafana admin password
  kubernetes.core.k8s_info:
   kind: Secret
   name: grafana
   namespace: "{{ pro_graf_release_namespace }}"
   kubeconfig: /etc/kubernetes/admin.conf
  register: grafana_secret
  become: true
  become_user: root

- name: Decode Grafana admin password using shell
  ansible.builtin.shell: echo "{{ grafana_secret.resources[0].data['admin-password'] }}" | base64 --decode
  register: decoded_password_result
  changed_when: false # This command doesn't change system state
  # Ensure this task only runs if the secret data is available
  when: grafana_secret.resources is defined and grafana_secret.resources | length > 0 and 'admin-password' in grafana_secret.resources[0].data

- name: Ensure logs directory exists
  ansible.builtin.file:
    path: "{{ playbook_dir }}/../logs"
    state: directory
    mode: '0755'
  become: true
  become_user: root

- name: Save decoded Grafana admin password to Logs folder
  ansible.builtin.copy:
    content: "{{ decoded_password_result.stdout }}"
    dest: "{{ playbook_dir }}/../logs/grafana_admin_password.txt"
    mode: '0600'
  when: decoded_password_result is defined and
      decoded_password_result.stdout is defined and
      decoded_password_result.stdout | length > 0
  become: true
  become_user: root